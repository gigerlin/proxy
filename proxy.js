// Generated by CoffeeScript 1.8.0

/*
  @author Gilles Gerlinger
  Copyright 2014. All rights reserved.
 */

(function() {
  var Proxy, io;

  io = require('socket.io');

  module.exports = Proxy = (function() {
    Proxy.prototype.register = function(server, data, ack_cb) {
      var Class, err;
      if (this.Classes[data.Class]) {
        this.log(err = "error: class " + data.Class + " already registered");
        return ack_cb(err);
      } else {
        this.log("registering class: " + data.Class);
        this.Classes[data.Class] = Class = this.proxy.of("/" + data.Class);
        server.on('disconnect', (function(_this) {
          return function() {
            _this.log("removing class: " + data.Class);
            delete _this.Classes[data.Class];
            return Class.removeAllListeners('connection');
          };
        })(this));
        Class.on('connection', (function(_this) {
          return function(client) {
            var ID;
            ID = (Math.random() + '').replace('0.', '');
            _this.log("new connection " + ID + " for " + data.Class);
            client.on('rpc', function(msg, ack_cb) {
              return server.emit("" + ID, msg, function(msg, err) {
                return ack_cb(msg, err);
              });
            });
            server.on("" + ID, function(msg, ack_cb) {
              return client.emit('rpc', msg, function(msg, err) {
                return ack_cb(msg, err);
              });
            });
            client.emit('handshake', data.methods);
            return server.emit('new', ID, data.Class);
          };
        })(this));
        return ack_cb(null);
      }
    };

    function Proxy(port) {
      var info, nsp;
      this.Classes = [];
      this.proxy = io(port, {
        transports: ['websocket', 'polling']
      });
      this.log("Starting Proxy on " + port);
      nsp = this.proxy.of('/proxy');
      nsp.on('connection', (function(_this) {
        return function(server) {
          _this.log('NEW connection');
          return server.on('register', function(data, ack_cb) {
            return _this.register(server, data, ack_cb);
          });
        };
      })(this));
      info = this.proxy.of('/proxy/info');
      info.on('connection', (function(_this) {
        return function(server) {
          return info.emit('info', Object.keys(_this.Classes));
        };
      })(this));
    }

    Proxy.prototype.log = function(text) {
      return console.log(text);
    };

    return Proxy;

  })();

}).call(this);
